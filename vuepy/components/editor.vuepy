v-def templ_editor:
    div:
        div(v-if = '!doc_num', class = 'hero'):
            div(class = 'hero-body'):
                div(class = 'container  has-text-centered'):
                    img(:src = "$root.v3p_static + '/vue3pyj_art.png'"):
                    #h1(class = 'title is-size-1', style ='background-color: white'):
                    #    span(style = 'color: #42b983;'):'Vue'
                    #    span(class = 'v2p_char',  style = 'color: black;'):'{{w23p_ver}}'
                    #    span(class = 'v2p_char',style = 'color: #006ea5;'):'p'
                    #    span(class = 'v2p_char',style = 'color: #bfa03b;'):'y'
                    #    i(class = 'v2p_char',style = 'color: #b00;'):'j'

        div(v-show = 'doc_num', class = 'editor-grid'):
            # doc tabs
            div:
                div(class = 'tabs is-boxed mt-1 mb-0 active-has-shadow'):
                    ul:
                        li(v-for = 'doc, doc_k, idx in doc_infos',
                            :key = 'doc_k',
                            :class = "{'is-active': doc_num == doc_k}"
                          ):
                            a(@click = '(!$event.v3p_close && (swap_doc(doc_k), edit_focus()))'):
                                span:
                                    "{{doc.name}}"
                                span(class = 'icon', @click = '($event.v3p_close = true, close(doc_k))'):
                                    i(class='fa fa-times',
                                      :style = '{color: doc.is_saved ? null : "red"}',
                                      :title = 'doc.is_saved ? null : "not saved"'
                                     ):
            # doc bar
            div:
                div(class= 'level has-shadow py-1'):
                    div(class = 'level-left ml-3'):
                        div(class = 'level-item'):
                            span(class = 'has-text-weight-bold', style = 'min-width:200px;'): '{{doc_num && doc_info.name || ""}}'
                        div(class = 'level-item'):
                            span(style = 'min-width:150px;'): 'ln: {{cursor.line+1}} col: {{cursor.ch}}'
                        div(class = 'level-item'):
                            button(class = 'button',
                                   :class = "{'is-primary': vim_mode}",
                                   @click = 'toggle_vim()',
                                   title = 'toggle Vim-mode [Alt-v]'
                            ): 'Vim'
                    div(class = 'level-right mr-3'):
                        #div(class = 'level-item'):
                        #    dropdown-b(label = 'msg', class = 'is-right'):
                        #        div(v-for = 'i in [1,2,3,4]', class = 'dropdown-item'):
                        #            '{{i+"-item"}}'
                        div(class = 'level-item'):
                            button(class = 'button', @click="open_dir"):
                                '{{doc_dir}}'
                            span(class = 'pl-2', @click="open_dir"): '/ {{doc_info && doc_info.name}}'
            # editor window
            div(style = 'overflow:auto;'):
                div(class = 'editor-window'):
                    div( ref='cm_el', style = 'height:100%;'):
            div:
                div(style = 'height:45px;'):
                    div(v-if = 'error', @click = 'go_error', style = 'cursor:pointer;'):
                        div():
                            'File: {{error.filename}}'
                        template(v-if = 'error.readfile_error'):
                            '{{error.message}} {{error.readfile_error.line}}:{{error.readfile_error.col}}'
                        template(v-else):
                            '{{error.message}} {{error.line}}:{{error.col}}'
                        div: '{{error.stack}}'
                    div(v-else):  'ok'





v-pyj:
+++
from asset.rs_vue import RS_vue, V_collector

vc = V_collector()
class Editor(RS_vue):
    def __init__(self):
        super(vc)
        self.template = templ_editor
        self.map_store = {
            push_cmd:'push_cmd~',
            get_fs: 'get_fs',
            windows:'/editor.windows',
            doc_infos:'/editor.doc_infos',
            set_active_window:'/editor.set_active_window~',
            mount_cm:'/editor.mount_cm*',
            swap_doc:'/editor.swap_doc*',
            close:'/editor.close*',
            web23py:'web23py',
            vim_mode:'/editor.vim_mode',
            toggle_vim:'/editor.toggle_vim*',
            toggle_explorer:'toggle_explorer~',
            set_dir:'/explorer.set_dir~'
        }
    def data(self):
        self.console = console
        ret={
            cursor: { line:0, ch:0},
            error: None,
        }
        return ret

    def open_dir(self):
        self.push_cmd(
            'toggle_explorer',
            def():
                self.set_dir(self.doc_info.parent)
                self.toggle_explorer(True);
           , True
        )


    @vc.computed
    def w23p_ver(self):
        return /^.+(\d)/.exec(self.web23py)[1]

    @vc.computed
    def doc_num(self):
        return self.windows.w0 and self.windows.w0.doc_num

    @vc.computed
    def doc_info(self):
        return self.doc_num and self.doc_infos[self.doc_num]

    @vc.computed
    def doc_dir(self):
        if not self.doc_info:
            return
        fs = self.get_fs()
        return fs.path_by_id(self.doc_info.parent).path

    def mounted(self):
        def clean_up(cm):
            self.cm = cm
            self.set_active_window('w0')
            self.$refs.cm_el.children[0].style.lineHeight='1.5'
            cm.on('cursorActivity', def(): self.cursor_move();)
            #cm.setSize('100%', '80vh')
            cm.setSize('100%', '100%')
        self.mount_cm(self.$refs.cm_el, 'w0').then(clean_up)

    @vc.meth
    def edit_focus(self):
        self.$nextTick(def(): self.cm and self.cm.focus();)

    @vc.meth
    def cursor_move(self):
        self.cursor = self.cm.getCursor()

    @vc.watch('doc_num')
    def doc_num_watch(self, to_doc, cur_doc):
        self.$nextTick(def():
                  self.cm.refresh()
                  self.cursor_move()
                  self.edit_focus()
        )

    @vc.meth
    def go_error(self):
        err = self.error.readfile_error or self.error
        if not err or err.line == undefined: return;
        self.cm.focus()
        self.cm.doc.setCursor(err.line-1, err.col)

def make():
    return Editor()

---