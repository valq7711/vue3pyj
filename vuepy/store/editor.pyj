from asset.rs_vue import V_collector
from asset.store3 import RS_store
from asset.common import asyncer
from asset import cm_vuepy, cm_rapydscript

def window_state():
    ret = {
        doc_num: None, # holds  '#[number]' of active document
        width: 960, # width of editor area
        get_cm: None,
    }
    return ret


EDITOR_DEFSTATE = {
    doc_infos: {}, # holds meta of all opened documents {'#1': {name:, mtime:, ...}, '#2':{...} }
    last_doc_num: 0, # counter to generate cur_doc_hnum as '#' + last_doc_num
    vim_mode: False,
    active_window: None,
    windows : {}
}


vc = V_collector()
class Editor:

    #class Store(RS_store):
    def __init__(self):
        self.inject = {
            api: 'api',
            flash: '$flash',
            start_modal: '$start_modal'
        }
        self.cm_docs = {}
        self.cm_windows = {}

    def _mounted(self):
        self.init_cm()
        def on_changed(doc_num, cm_doc):
            #debounce
            if not on_changed.handlers:
                on_changed.handlers={}
                on_changed.tm={}
            if on_changed.handlers[doc_num]:
                clearTimeout(on_changed.tm[doc_num])
            else:
                on_changed.handlers[doc_num] = def():
                    is_saved = cm_doc.isClean(self.get('doc_infos')[doc_num].change_gen)
                    self.commit('toggle_doc_saved',doc_num, is_saved)
                    del on_changed.handlers[doc_num]
            on_changed.tm[doc_num] = setTimeout(on_changed.handlers[doc_num], 250)

        self.$on('doc_changed', on_changed)
        self.$on('save', def(cm):
                 doc_num = self.doc_num_by_cm_doc(cm.doc)
                 self.dispatch('save', doc_num)
        )

        self.$on('save_as', def(cm):
                doc_num = self.doc_num_by_cm_doc(cm.doc)
                content = cm.doc.getValue()
                save_as = {
                    name: self.get('doc_infos')[doc_num].name,
                    content: content
                }
                self.commit('/explorer.save_as',  save_as)
                self.commit('$.toggle_explorer',  True)
        )
        self.$on('compile', def(): self.dispatch('compile_active_doc', False);)
        self.$on('open', def(): self.commit('$.toggle_explorer');)
        self.$on('close', def(): self.dispatch('close', self.get('active_doc_num'));)

    def init_cm(self):
        CM = self.api.CM

        CM.defaults.indentUnit = 4
        defkeys = CM.defaults.extraKeys = {}

        defkeys["Ctrl-Space"] = "autocomplete"
        defkeys["Ctrl-Enter"] = def(cm): cm.showHint({hint: CM.hint.anyword});
        defkeys["Tab"] = "indentMore"
        defkeys["Shift-Tab"] = "indentLess"
        defkeys["Ctrl-O"] = def(cm):  self.$emit('open');
        defkeys["Ctrl-S"] = def(cm):  self.$emit('save', cm);
        defkeys["Ctrl-Alt-S"] = def(cm): self.$emit('save_as', cm);
        defkeys["Ctrl-D"] = def(cm):  self.$emit('close');
        defkeys["Shift-Ctrl-C"] = def(cm):  self.$emit('new');
        defkeys["Ctrl-F9"] = def(cm):  self.$emit('compile');
        defkeys["Alt-V"] = def(cm):  self.dispatch('toggle_vim');
        #defkeys["Shift-Ctrl-Q"] = def(cm): CM.commands.foldAll(cm);
        #defkeys["Ctrl-Q"] = def(cm): cm.foldCode(cm.getCursor());
        CM.commands.save = def(cm): self.$emit('save', cm);

        cm_rapydscript.reg_mode(CM)
        cm_vuepy.reg_mode(CM)

    @vc.action
    def mount_cm(self, el, win_id, opt):
        def_opt = {
            mode: 'python',
            lineNumbers : True,
            showCursorWhenSelecting: True,
            matchBrackets: True,
            foldGutter: True,
            gutters: ["CodeMirror-linenumbers", "CodeMirror-foldgutter"]
        }
        opt = Object.assign(def_opt, opt or {})
        cm = self.cm_windows[win_id] = self.api.CM(el , opt)
        self.commit('add_window', win_id, {get_cm: def(): return cm;})
        return cm

    @vc.mutation
    def add_window(self, win_id, st):
        st = Object.assign(window_state(), st)
        self.$set(self.state.windows, win_id, st)

    @vc.mutation
    def set_active_window(self, win_id):
        self.state.active_window = win_id

    @vc.mutation
    def open(self, doc_info):
        doc_num = '#' + (self.state.last_doc_num +=1)
        self.$set(self.state.doc_infos, doc_num, doc_info)
        return doc_num

    @vc.mutation
    def set_doc_info(self, doc_num, doc_info):
        self.$set(self.state.doc_infos, doc_num, doc_info)

    @vc.mutation
    def set_doc_change_gen(self, doc_num, gen):
        self.state.doc_infos[doc_num].change_gen = gen

    @vc.mutation
    def toggle_doc_saved(self, doc_num, onoff):
        is_saved = self.state.doc_infos[doc_num].is_saved
        ret = self.state.doc_infos[doc_num].is_saved = onoff is undefined ? not is_saved : onoff

    @vc.mutation
    def close(self, doc_num):
        self.$del(self.state.doc_infos, doc_num)

    @vc.mutation
    def swap_doc(self, doc_num,  win_id):
        old = (w = self.state.windows[win_id]).doc_num
        w.doc_num = doc_num
        return old

    @vc.mutation
    def toggle_vim(self, onoff):
        ret = self.state.vim_mode = onoff is undefined ? not self.state.vim_mode : onoff
        return ret

    @vc.mutation
    def set_error(self, doc_num, error):
        self.$set(self.state.doc_infos[doc_num], 'error', error or None)

    @vc.mutation
    def clear_error(self, doc_num):
        self.$set(self.state.doc_infos[doc_num], 'error', None)

    @vc.getter
    def active_doc_num(self):
        aw = self.state.windows[self.state.active_window]
        return aw and aw.doc_num

    @vc.action
    def trim_space(self, doc_num):
        cm_doc = self.cm_docs[doc_num]
        do_replace = def():
                cursor = cm_doc.getSearchCursor(/\s+?$/)
                while cursor.findNext():
                    cursor.replace('')
        cm = cm_doc.getEditor()
        if cm:
            cm.operation(do_replace)
        else:
            do_replace()

    @vc.action
    def reload(self, doc_num_or_fid):
        fs = self.api.fs
        doc_num = doc_num_or_fid
        if doc_num[0] is '#': # - doc_num, fid starts with ID
            fid = self.get('doc_infos')[doc_num].id
        else:
            fid  = doc_num
            doc_num = self.doc_num_by_fid(fid)
            if not doc_num:
                return
        cm_doc = self.cm_docs[doc_num]
        cursor = cm_doc.getCursor()
        cm_doc.setValue(fs.files[fid].content)
        cm_doc.setCursor(cursor)
        self.commit('set_doc_change_gen', doc_num, cm_doc.changeGeneration())
        self.commit('toggle_doc_saved', doc_num, True)

    @vc.action
    @asyncer
    def save_all(self):
        for k in self.get('doc_infos'):
            yield self.dispatch('save', k)

    @vc.action
    @asyncer
    def save(self, doc_num):
        yield self.dispatch('trim_space', doc_num)
        fs = self.api.fs
        cm_doc = self.cm_docs[doc_num]
        content = cm_doc.getValue()
        fid = self.get('doc_infos')[doc_num].id
        fs.write_file(fid, content)
        self.commit('set_doc_change_gen', doc_num, cm_doc.changeGeneration())
        self.commit('toggle_doc_saved', doc_num, True)

    @vc.action
    @asyncer
    def close_all(self):
        all_closed = True
        for k in self.get('doc_infos'):
            maybe_canceled = yield self.dispatch('close', k)
            if maybe_canceled is 'cancel':
                all_closed = False
        return all_closed

    @vc.action('close')
    @asyncer
    def $close(self, doc_num):
        doc_info = self.get('doc_infos')[doc_num]
        if not doc_info.is_saved:
            ok_cancel =  yield self.start_modal('confirm',
                           {message: doc_info.name + ' is not saved! Do you want to continue?'})
            if ok_cancel is 'cancel':
                return 'cancel'
        aw = self.get('active_window')
        cur_doc_num = self.get('windows')[aw].doc_num
        if cur_doc_num != doc_num:
            del self.cm_docs[doc_num]
            self.commit('close', doc_num)
            return
        isfound = False
        next_doc_k = None
        prev_doc_k = None
        _prev_doc_k = None
        for doc_k in self.cm_docs:
            if isfound:
                next_doc_k = doc_k
                break
            if doc_k == cur_doc_num:
                isfound = True
                prev_doc_k = _prev_doc_k
            _prev_doc_k = doc_k
        self.dispatch('swap_doc', next_doc_k or prev_doc_k or None)
        del self.cm_docs[doc_num]
        self.commit('close', doc_num)


    @vc.action('open')
    def $open(self, fp, win_id):
        fs =  self.api.fs
        fid = fs.id_by_path(fp)
        return self.dispatch('open_by_id', fid, win_id)

    @vc.action
    def open_by_id_in_active_window(self, fid):
        return self.dispatch('open_by_id', fid, self.get('active_window'))

    @vc.action
    def open_by_id(self, fid, win_id, as_doc_num):
        fs =  self.api.fs
        info = fs.get_info(fid, True)
        content = info.obj.content
        del info.obj
        info.is_saved = True
        if not (info.type is 'file'):
            raise Error('bad path')

        def create_cm_doc(doc_num, content, ftype):
            doc = self.cm_docs[doc_num] = self.api.CM.Doc(content, ftype)
            doc.on('change', def(cm_doc, ch_obj ):
                                        self.$emit('doc_changed', doc_num, cm_doc, ch_obj)
            )
            info.change_gen = doc.changeGeneration()

        if as_doc_num:
            create_cm_doc(as_doc_num, content, self.map_ftype(info.name))
            doc_num = as_doc_num
            self.commit('set_doc_info', doc_num, info)
        else:
            doc_num = self.doc_num_by_fid(fid)
            if not doc_num:
                doc_num = self.commit('open', info)
                create_cm_doc(doc_num, content, self.map_ftype(info.name))
        if win_id and \
                (as_doc_num or self.get('windows')[win_id].doc_num != doc_num):
            self.cm_windows[win_id].swapDoc(self.cm_docs[doc_num])
            self.cm_windows[win_id].focus()
            self.commit('swap_doc', doc_num, win_id )
        return doc_num

    @vc.action('swap_doc')
    def $swap_doc(self, doc_num, win_id):
        win_id = win_id or self.get('active_window')
        if self.get('windows')[win_id].doc_num != doc_num:
            if doc_num:
                self.cm_windows[win_id].swapDoc(self.cm_docs[doc_num])
                self.cm_windows[win_id].focus()
            return self.commit('swap_doc', doc_num, win_id)
        return doc_num

    @vc.action('toggle_vim')
    def $toggle_vim(self, onoff):
        onoff = self.commit('toggle_vim', onoff)
        mode = onoff ? 'vim' : 'default'
        for k in self.cm_windows:
            self.cm_windows[k].setOption('keyMap', mode)

    @vc.action
    def set_cursor(self, ln, col, doc_num):
        dn = doc_num or self.get('active_doc_num')
        self.cm_docs[dn].setCursor(ln, col)
        if not doc_num:
            self.cm_windows[self.get('active_window')].focus()

    @vc.action
    def compile_active_doc(self, compile_only):
        doc_num = self.get('active_doc_num')
        if not doc_num:
            return
        s = self.cm_docs[doc_num].getValue()
        finfo = self.get('doc_infos')[doc_num]
        fp = self.api.fs.path_by_id(finfo.id).path
        ftype = self.map_ftype(fp)
        def post_proc(r):
            if r.error:
                self.flash({component: 'error'}, 'error')
            else:
                self.flash('ok', 'ok')
        self.dispatch('$.compile', ftype, s, fp, compile_only).then(post_proc)

    #--------- utils -------------
    def map_ftype(self, fp):
        map_type  = {}
        map_type['py'] = 'python'
        map_type['pyj'] = 'rapydscript'
        map_type['vuepy'] = 'vuepy'
        map_type['js'] = 'javascript'
        map_type['css'] = 'css'
        map_type['html'] = {
            name: 'htmlmixed',
            tags: {
                script: [["type", /^text\/(x-)?python$/, "text/x-python"],
                [None, None, "javascript"]]
            }
        }
        ext = fp.split('.')[-1]
        return map_type[ext]



    def doc_num_by_fid(self, file_id):
        if not file_id:
            return False
        docs = self.get('doc_infos')
        for doc_num in docs:
            if docs[doc_num].id == file_id:
                return doc_num
        return False

    def doc_num_by_cm_doc(self, cm_doc):
        for doc_num in self.cm_docs:
            if self.cm_docs[doc_num] is cm_doc:
                return doc_num
        return False

store = RS_store(EDITOR_DEFSTATE, vc, Editor())
if __name__ == '__main__':
    pass
