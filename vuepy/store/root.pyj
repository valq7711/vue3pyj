from asset.rs_vue import V_collector
from asset.store3 import RS_store
from asset.common import asyncer
from asset.fs import FS
from asset.vuepy_compiler import vuepy_compile, rs_compile
import asset.vuepy_output as vuepy_output
import .editor, .explorer
import server
import app_menu
async import axios
async import CodeMirror
async import Vue

Vue.use(RS_store)

def path_map(web23py):
    ret = {
        html_dir : {
            'web2py': '/views',
            'web3py': '/templates'
        },
        'js': '/static/js/',
        'css': '/static/css/',
        def html(self, pth):
            pth = pth.split('/')
            pth[0] is 'root' or not pth[0] and pth.shift()
            pth[0] = ret.html_dir[web23py] # replace `vuepy`
            return pth.join('/') + '.html'
    }
    return ret

def default_state():
    ret = {
        is_logged: False,
        ctask: None,
        flash: {msg:'Hi', status:'', component: None, cargs: None, trigger:0},
        is_busy: True,
        menus: None,
        web23py: None, # web2py | web3py
        w23p_app: None,
        w23p_app_list: None,
        get_fs: None,
        get_CM: None,
        show_explorer: False,
        compile_error: None,
        modal_state: {
            is_active: False,
            inner_component: None,
            inner_args: None,
            promise: None,
            promise_ok: None,
        },
        search: None,
        search_filters:{'py':True, 'pyj': True, 'vuepy': True}
    }
    return ret

vc = V_collector()
class Root:

    def _mounted(self):
        # ------- init state -----------
        web23py = self.params.web23py
        self.state.web23py = web23py
        self.state.menus = app_menu.get_menu(web23py)
        self.state.get_fs = def(): return self.api.fs;
        self.state.get_CM = def(): return self.api.CM;
        # fs_refresher
        fs_refresher = def():
            self.state.get_fs = def(): return self.api.fs;
        self.$on('fs_restored',fs_refresher)
        self.$on('fs_changed',fs_refresher)

        # clear `save_as` on hide explorer
        self.$watch(
            'state.show_explorer',
            def(n,o):
                 if not n:
                     self.commit('/explorer.save_as', None)
        )

        self.$on('server', self.on_server.bind(self))
        self.install_fs_listeners()
        self.cmd_stack = []



    def __init__(self, params):
        self.root = True
        self.params = params
        web23py = params.web23py
        self_app = params.app_root

        self.modules = {
            'editor':editor.store,
            'explorer':explorer.store
        }

        # api
        self.api = {}
        api_baseURL = web23py is 'web3py'? self_app : self_app + '/default/api'
        self.api.server = server.API(
            axios,
            api_baseURL,
            self.$bus,
            def(): return self.dispatch('start_modal', 'XLogin');
        )
        self.api.fs = FS()
        self.api.CM = CodeMirror

        # output for compile
        self.output_path_map = path_map(web23py)

        #----------- provide ----------
        self.provide = {
            api: self.api,
            $flash: self.$flash.bind(self),
            $start_modal: self.$start_modal.bind(self),
            get $router(_): return self.$router;,
            get $route(_): return self.$route;,
        }


    # server events
    def on_server(self, a):
        if a.event is 'error':
            w2p_err = (r = a.data.response) and r.headers.web2py_error or ''
            self.$flash(f'server error: ${a.data.message} ${w2p_err}', 'error')
        else:
            msg = a.data.flash
            if msg:
                self.$flash(msg,  'ok')

    # fs
    @asyncer
    def process_file(self, cmd, fid):
        fs = self.api.fs
        fdata = fs.get_info(fid, True)
        fdata.path = fs.path_by_id(fid).path
        #fdata.content = fdata.obj.content
        content = fdata.obj.content
        del fdata.obj
        fdata.w23p_app = self.get('w23p_app')
        if cmd is 'write_file':
            frm_data = new FormData()
            for k in Object.keys(fdata):
                frm_data.append(k, fdata[k])
            frm_data.append('content', new Blob([content], {type:'text/plain'}))
            post_data = frm_data
        elif cmd is 'del_file':
            post_data = {fdata: fdata}
        else:
            raise Error('unknown command: ' + cmd)
        try:
            resp = yield self.api.server.post(cmd, post_data)
            print('server_resp: ', resp.data)
            if cmd is 'write_file' and resp.data.md5_hash and not resp.data.error:
                fs.files[fid].md5_hash = resp.data.md5_hash
            if (e = resp.data.error):
                self.$flash('Server error: ' + e, 'error');
        except as e:
            self.$flash('Server error: ' + e.message, 'error');

    def install_fs_listeners(self):
        self.api.fs.on('write_file', def(fid): self.process_file('write_file', fid);)
        self.api.fs.on('del_file', def(fid): self.process_file('del_file', fid);)
        self.api.fs.on('create_dir', asyncer(def(did):
            fs = self.api.fs
            dir_path = fs.path_by_id(did).path
            data = {
                w23p_app: self.get('w23p_app'),
                dir_path: dir_path
            }
            try:
                resp = yield self.api.server.post('create_dir', data)
                print('server_resp: ', resp.data)
                e = resp.data.error
                if e:
                    self.$flash('Server error: ' + e, 'error');
            except as e:
                self.$flash('Server error: ' + e.message, 'error');
        ))


    @vc.getter
    def search_filters(self):
        return {
            get: def(f): return self._get('search_filters')[f.toLowerCase()];,
            toggle: def(f, v): self.commit('toggle_search_filter', f, v);
        }

    @vc.mutation
    def toggle_search_filter(self, f, v):
        f = f.toLowerCase()
        tmp = self.state.search_filters
        v  = v is undefined ? !tmp[f] : v
        self.$set(tmp, f, v)

    @vc.getter
    def cmd_stack(self):
        return self.cmd_stack

    @vc.mutation
    def push_cmd(self, name, args, if_not):
        if if_not and self.cmd_stack.find(def(it): return it[0] is name;):
            return

        tm = def():
            idx = self.cmd_stack.findIndex(def(it): return it[1] is tm_off;)
            self.cmd_stack.splice(idx, 1)
            self.dispatch('run', name, args)

        tm_id = setTimeout(tm, 0)
        tm_off = def():
            idx = self.cmd_stack.findIndex(def(it): return it[1] is tm_off;)
            clearTimeout(tm_id);
            self.cmd_stack.splice(idx, 1)

        self.cmd_stack.push([name, tm_off])

    @vc.mutation
    def set_modal_inner(self, inner, args):
        self.state.modal_state.inner_component = inner
        self.state.modal_state.inner_args = args

    @vc.mutation
    def compile_error(self, err):
        self.state.compile_error = err

    @vc.mutation
    def set_modal_promise(self, p):
        self.state.modal_state.promise = p

    @vc.mutation
    def set_modal_promise_ok(self, ok):
        self.state.modal_state.promise_ok = ok

    @vc.mutation
    def toggle_modal(self, onoff):
        onoff = onoff is undefined ? !self.state.modal_state.is_active: onoff
        self.state.modal_state.is_active = onoff

    @vc.mutation
    def toggle_busy(self, onoff):
        onoff = onoff is undefined ? !self.state.is_busy: onoff
        self.state.is_busy = onoff

    @vc.mutation
    def toggle_explorer(self, onoff):
        onoff = onoff is undefined ? !self.state.show_explorer : onoff
        self.state.show_explorer = onoff

    @vc.mutation
    def set_w23p_app(self, w23p_app):
        self.state.w23p_app = w23p_app

    @vc.mutation
    def flash(self, msg, status):
        if type(msg) is 'String':
            self.state.flash.msg = msg
            self.state.flash.component = None
            self.state.flash.cargs = None
        else:
            self.state.flash.component = msg.component
            self.state.flash.cargs = msg.cargs
            self.state.flash.msg = None
        self.state.flash.status = status
        self.state.flash.trigger += 1
        self.$emit('flash', msg, status)


    #class Store(RS_store):

    @vc.getter
    def search_result(self):
        # to inject the dependency on the currently edited application
        # we can do the simple tick:
        self.get('get_fs')
        # since we touch 'get_fs' this getter will be recomputed if 'get_fs' is changed!

        if not (s = self.get('search')):
            return []
        r = new RegExp(s,'gm')
        fs = self.api.fs
        ret= []
        fext = self._get('search_filters')
        fext = Object.keys(fext).filter(def(it): return fext[it.toLowerCase()];)
        for fid in fs.files:
            obj = fs.files[fid]
            ext = obj.name.split('.')[-1]
            if ext in fext:
                if r.test(obj.content):
                     ret.push([fid, fs.path_by_id(fid)])
        return ret

    @vc.action
    @asyncer
    def try_connect(self):
        try:
            self.commit('is_logged=', (yield self.api.server.get('try_connect')) and True)
            return True
        except:
            return False

    @vc.action
    @asyncer
    def login(self, data):
        pwd = data.get('password')
        self.commit('is_logged=',
            (yield self.api.server.post('login', {password: pwd})).data.user
        )

    @vc.action
    @asyncer
    def logout(self):
        self.commit('toggle_busy', True)
        yield self.api.server.post('logout')
        self.commit('toggle_busy', False)
        self.commit('is_logged=', False)
        self.dispatch('start_modal', 'XLogin')

    @vc.action
    @asyncer
    def w23p_app_list(self):
        self.commit('w23p_app_list=',(yield self.api.server.get('app_list')).data.app_list)


    @vc.action
    @asyncer
    def run(self, cmd, args):
        adoc_num = self.get('/editor.active_doc_num')
        if cmd is 'toggle_explorer':
            self.commit('toggle_explorer')
        elif cmd is 'reload':
            self.dispatch('reload_current')
        elif cmd is 'select_app':
            self.dispatch('select_app')
        elif cmd is 'compile':
            if adoc_num:
                self.dispatch('/editor.compile_active_doc')
        elif cmd is 'save':
            if adoc_num:
                self.dispatch('/editor.save', adoc_num)
                self.$flash('Done!', 'ok')
        elif cmd is 'save_all_close':
            yield self.dispatch('/editor.save_all')
            yield self.dispatch('/editor.close_all')
        elif cmd is 'close_all':
            self.dispatch('/editor.close_all')
        elif cmd is 'logout':
            self.dispatch('logout')
        elif cmd is 'reload_apps':
            self.dispatch('reload_apps')
        elif cmd is 'reload_app':
            self.dispatch('reload_apps', self.get('w23p_app'))

    @vc.action
    @asyncer
    def reload_current(self):
        if not (yield self.dispatch('/editor.close_all')):
            return
        self.commit('/explorer.set_dir', 0)
        yield self.dispatch('load_fs_from_srv', '<reload>')
        self.$flash('Done', 'ok')

    @vc.action
    @asyncer
    def load_fs_from_srv(self, w23p_app):
        if w23p_app is '<reload>':
           w23p_app = self.get('w23p_app')
        fs = self.api.fs
        self.commit('toggle_busy', True)
        try:
            ret = (yield self.api.server.get('get_fs', [w23p_app]))
        except as err:
            pass
        self.dispatch('load_fs', ret.data, w23p_app)
        self.commit('toggle_busy', False)
        return ret

    @vc.action
    def load_fs(self, data, w23p_app):
        self.api.fs.loads(data)
        self.commit('set_w23p_app', w23p_app)
        self.$emit('fs_restored', w23p_app)

    @vc.action
    def start_modal(self, inner, args):
        resolver = def(ok, err):
            self.commit('set_modal_promise_ok', ok)
        ret = Promise(resolver)
        self.commit('set_modal_inner', inner, args)
        self.commit('set_modal_promise', ret)
        self.commit('toggle_modal', True)
        return ret

    @vc.action
    def close_modal(self, *args):
        ok = self.get('modal_state').promise_ok
        self.commit('toggle_modal', False)
        self.commit('set_modal_inner', None, None)
        self.commit('set_modal_promise', None)
        self.commit('set_modal_promise_ok', None)
        ok.apply(None, args)

    @vc.action
    @asyncer
    def select_app(self):
        self.commit('toggle_busy', True)
        yield self.dispatch('w23p_app_list')
        self.commit('toggle_busy', False)
        app = yield self.dispatch('start_modal', 'AppSelector', {app_list: self.get('w23p_app_list'), cur_app: self.get('w23p_app') } )
        if app is 'cancel':
            return

        if not (yield self.dispatch('/editor.close_all')):
            return

        self.commit('/explorer.set_dir', 0)
        return self.dispatch('load_fs_from_srv', app)

    @vc.action
    def reload_apps(self, app_name):
        args= []
        if app_name:
            args.push(app_name)
        self.api.server.get('reload', args).then(
            def(): self.$flash('Done!', 'ok');
        )

    @asyncer
    def compile_py(self, code, fp):
        resp = yield self.api.server.post('compile_py',
                      {w23p_app: self.get('w23p_app'), code, fp})
        data = resp.data
        err =  data.err and Object.assign(Error(), data.err)
        if err:
            err.filename = fp
            raise err
        return code

    @vc.action
    @asyncer
    def compile(self, compiler, s, fp, compile_only):
        c_map = {
            'vuepy':vuepy_compile,
            'rs':rs_compile,
            'rapydscript':rs_compile,
            'python': def(s, fp): return self.compile_py(s, fp);
        }
        if not c_map[compiler]:
            self.$flash('Can`t compile ' + fp, 'warn')
            return
        try:
            compiled = yield c_map[compiler](s, fp, self.api.fs)
        except as err:
            if err.response: # server error
                raise err
            self.commit('compile_error', err)
            return {error:err}
        self.commit('compile_error', None)
        if not compile_only:
            fs = self.api.fs
            off = fs.on('write_file', def(fid): self.dispatch('/editor.reload', fid);)
            if compiler is 'python':
                fid = fs.id_by_path(fp)
                fs.write_file(fid, compiled)
            else:
                vuepy_output.output(compiled, self.api.fs, self.output_path_map)
            off()
            self.$emit('fs_changed')
        return compiled

    # shortcuts
    def $flash(self, *args):
        return self.commit('flash', *args)

    def $start_modal(self, *args):
        return self.dispatch('start_modal', *args)

def make(params):
    return RS_store(default_state(), vc, Root(params))

if __name__ == '__main__':
    pass
