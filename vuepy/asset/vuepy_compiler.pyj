#globals: rs_req
async import rapydscript_web
from .vuepy_parser import pre_compile
RS_IMPORT_DIRS = ['root/vuepy']

PYJ_CACHE = None
CSS_CACHE = None

re_split_ext = /^(.*)\.([^\.]+)$/
re_split_pth = /^(.*)\/([^\/]+)$/


VUEPY_PREC_CACHE = []


def clear_cache():
    nonlocal PYJ_CACHE, CSS_CACHE, VUEPY_PREC_CACHE
    PYJ_CACHE = {}
    CSS_CACHE = {}
    VUEPY_PREC_CACHE = {}


def vuepy_precompile(s, fp_no_ext):
    try:
        prec = pre_compile(s)
    except as e:
        e.filename = fp_no_ext + '.vuepy'
        raise e
    if prec.v_pyj:
        PYJ_CACHE[fp_no_ext +'.pyj'] = prec.v_pyj
    if prec.v_css:
        prec.v_css.store_in = prec.v_css.store_in or (fp_no_ext.split('/')[-1] + '.css')
        # remove `root/vuepy/` prefix from filename for stored_by
        prec.v_css.stored_by = fp_no_ext.split('/')[2:].join('/') + '.vuepy'
        if not CSS_CACHE[prec.v_css.store_in]:
            CSS_CACHE[prec.v_css.store_in] = {}
        CSS_CACHE[prec.v_css.store_in][prec.v_css.stored_by] = prec.v_css.css
    VUEPY_PREC_CACHE[fp_no_ext] = prec
    return prec

def make_file_reader(fs):
    class Read_ex(Error):
        def __init__(self):
            self.code = 'ENOENT'

    def read_file(fp):
        if PYJ_CACHE and PYJ_CACHE[fp]:
            return PYJ_CACHE[fp]
        fp_no_ext = re_split_ext.exec(fp)[1]
        fp_vuepy = fp_no_ext + '.vuepy'
        print('try import vuepy: ', fp_vuepy)
        if (fid =  fs.id_by_path(fp_vuepy)):
            prec = vuepy_precompile(fs.files[fid].content, fp_no_ext)
            if prec.v_pyj:
                ret =  prec.v_pyj
            else:
                raise Error('Found `' + fp_vuepy +'`, but there is no `v-pyj` in it, so nothing to import!')
        else:
            fid = fs.id_by_path(fp)
            print('try import: ', fp)
            if not fid:
                raise Read_ex()
            ret =  fs.files[fid].content
        return ret
    return read_file


def vuepy_compile(s, fp, fs, opt):
    clear_cache()
    defs = {
        compilers: {
                'rapydscript' : def(s): return _rs_compile(s, fp, fs)
        },
    }
    opt = Object.assign({}, defs, opt)
    if not s:
        fid = fs.id_by_path(fp)
        if not fid:
            raise Error('File `' + fp + '` not found ')
        s = fs.files[fid].content

    fp_no_ext = re_split_ext.exec(fp)[1]
    prec = vuepy_precompile(s, fp_no_ext)
    if prec.v_pyj:
        v_js = prec.compile_v_pyj(opt.compilers['rapydscript'])

    del VUEPY_PREC_CACHE[fp_no_ext] # required to avoid raise from maybe_vuepy_error
    if prec.nodes_to_compile:
        for it in prec.nodes_to_compile:
            if (compiler = opt.compilers[it.compiler]):
                try:
                    it.node.child_nodes[0] = compiler(it.node.child_nodes[0])
                except as err:
                    clear_cache()
                    prec.raise_err_at(it.node, err)
            else:
                prec.raise_err_at(it.node, Error('Compiler `'+ it.compiler +'` is not set'))
    css_frags = len(Object.keys(CSS_CACHE)) and CSS_CACHE or None
    clear_cache()
    return {src: fp,  'html': prec.make_html(), 'pyj': prec.v_pyj, 'js': v_js, 'css': css_frags}

def make_amd_wrapper(pyj_s):
    is_amd_mod = False
    def get_amd_imports(pyj_s):
        out = []
        def replacer(s, mod_as_names):
            nonlocal is_amd_mod
            is_amd_mod = True
            mod_as_names = mod_as_names.split(/ *, */)
            for mod_as_name in mod_as_names:
                mod_as_name = mod_as_name.split(/ +as +/)
                mod = mod_as_name[0]
                name = mod_as_name[1] or mod
                out.push({mod: mod.trim(), name: name.trim()})
            #print(arguments)
            return ''
        out_pyj_s = pyj_s.replace(/^import_amd +(.*?)(#.*)?\n/mg,replacer)
        return [out, out_pyj_s]

    mod_as_names, out_pyj_s = get_amd_imports(pyj_s)

    def make_wrapper(mod_as_names):
        def wrapper(js_s):
            imports_arr = []
            imports_as = []
            for mod_as_name in mod_as_names:
                imports_arr.push('"' + mod_as_name.mod + '' + '"')
                imports_as.push(mod_as_name.name)
            return 'define([' + imports_arr.join(',') +  '],' + \
                        'function(' + imports_as.join(',') + '){\nvar exports = {};\n' + \
                        js_s +'\nreturn exports;})'
        return wrapper
    wrapper = is_amd_mod ? make_wrapper(mod_as_names) : def(js_s): return js_s;
    return [wrapper, out_pyj_s]


def rs_compile(s, fp, fs, opt):
    clear_cache()
    return {'js': _rs_compile(s, fp, fs, opt), src: fp}

def _rs_compile(s, fp, fs, opt):
    me = _rs_compile
    compiler = rapydscript_web
    if me.running:
        compiler = compiler.factory()
    else:
        main_loop = me.running = True

    defs = {
        basedir: fp.split('/')[:-1].join('/'),
        readfile: make_file_reader(fs),
        es6: True,
        beautify: True,
        import_dirs: RS_IMPORT_DIRS
    }
    opt = Object.assign({}, defs, opt )
    try:
        s = s or opt.readfile(fp)
        amd_wrapper, pyj_s = make_amd_wrapper(s)
        ret = compiler.compile(pyj_s, opt)
        ret = amd_wrapper(ret)
    except as err:
        if not err.filename:
            err.filename = fp
        me.running = False
        maybe_vuepy_error(err)
        raise err
    if main_loop:
        me.running = False
    return ret


def maybe_vuepy_error(err):
    err_fp_no_ext = err.filename and err.filename.split(/\.[^.]+$/)[0]
    if err_fp_no_ext and (vuepy_prec = VUEPY_PREC_CACHE[err_fp_no_ext]):
        err.filename = err_fp_no_ext + '.vuepy'
        vuepy_prec.raise_v_pyj_err(err)
