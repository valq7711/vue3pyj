from asset.rs_vue import V_collector, RS_store, RS_state_api
from asset.common import asyncer
from asset.fs import FS
from asset.vuepy_compiler import vuepy_compile, rs_compile
import asset.vuepy_output as vuepy_output
import .editor, .explorer
import server
import app_menu

def default_state():
    ret = {
        is_logged: False,
        ctask: None,
        flash: {msg:'Hi', status:'', component: None, cargs: None},
        is_busy: True,
        menus: app_menu.get_factory().default(),
        web23py: None, # web2py | web3py
        w23p_app: None,
        w23p_app_list: None,
        get_fs: None,
        get_CM: None,
        show_explorer: False,
        compile_error: None,
        modal_state: {
            is_active: False,
            inner_component: None,
            inner_args: None,
            promise: None,
            promise_ok: None,
        }
    }
    return ret

vc = V_collector()
class State(RS_state_api):
    def __init__(self, vue,  getter_factory, state):
        super(vc, vue, state or default_state())
        self.vm.imports = {
            #is_logged_in: getter_factory('/user.is_logged_in')
        }

    @vc.mutation
    def set_modal_inner(self, inner, args):
        self.state.modal_state.inner_component = inner
        self.state.modal_state.inner_args = args

    @vc.mutation
    def compile_error(self, err):
        self.state.compile_error = err

    @vc.mutation
    def set_modal_promise(self, p):
        self.state.modal_state.promise = p

    @vc.mutation
    def set_modal_promise_ok(self, ok):
        self.state.modal_state.promise_ok = ok

    @vc.mutation
    def toggle_modal(self, onoff):
        onoff = onoff is undefined ? !self.state.modal_state.is_active: onoff
        self.state.modal_state.is_active = onoff

    @vc.mutation
    def toggle_busy(self, onoff):
        onoff = onoff is undefined ? !self.state.is_busy: onoff
        self.state.is_busy = onoff

    @vc.mutation
    def toggle_explorer(self, onoff):
        onoff = onoff is undefined ? !self.state.show_explorer : onoff
        self.state.show_explorer = onoff

    @vc.mutation
    def set_w23p_app(self, w23p_app):
        self.state.w23p_app = w23p_app

    @vc.mutation
    def flash(self, msg, status):
        if type(msg) is 'String':
            self.state.flash.msg = msg
            self.state.flash.component = None
            self.state.flash.cargs = None
        else:
            self.state.flash.component = msg.component
            self.state.flash.cargs = msg.cargs
            self.state.flash.msg = None
        self.state.flash.status = status

class Store(RS_store):
    def __init__(self, rs_req, web23py):
        #self.vue
        self.state_api = State(self.vue, self.getter_factory.bind(self))
        self.state_api.state.web23py = web23py
        self.actions = vc._actions

        # api
        self_app = window.location.pathname.split('/',2)[1]
        self.api = {}
        api_baseURL = web23py is 'web3py'? self_app : self_app + '/default/api'
        self.api.server = server.API(
            rs_req.get('axios.min'),
            '/' + api_baseURL,
            self.$bus,
            def(): return self.dispatch('start_modal', 'login');
        )
        self.api.fs = FS()
        self.api.CM = rs_req.get('codemirror/lib/codemirror')
        self.state_api.state.get_fs = def(): return self.api.fs;
        self.state_api.state.get_CM = def(): return self.api.CM;
        # output for compile
        html_dir = {
            'web2py': '/views',
            'web3py': '/templates',
        }
        self.output_path_map = {
            'html': def(pth):
                        pth = pth.split('/')
                        pth[0] is 'root' or not pth[0] and pth.shift()
                        pth[0] = html_dir[web23py] # replace `vuepy`
                        return pth.join('/') + '.html'
            ,'js': '/static/js/'
            ,'css': '/static/css/'
         }

        # modules
        self.mount_module(editor.Store(self), 'editor')
        self.mount_module(explorer.Store(self), 'explorer')
        fs_refresher =  def():
                     self.state_api.state.get_fs = def(): return self.api.fs;
        self.$on('fs_restored',fs_refresher)
        self.$on('fs_changed',fs_refresher)

        # clear `save_as` on hide explorer
        self.state_api.vm.$watch(
            'state.show_explorer',
            def(n,o):
                 if not n:
                     self.commit('/explorer.save_as', None)
        )

        # server events
        def on_server(a):
            if a.event is 'error':
                self.flash('server error: ' + a.data.message, 'error')
            else:
                msg = a.data.flash
                if msg:
                    self.flash(msg,  'ok')
        self.$on('server', on_server)

        # fs
        def process_file(cmd, fid):
            fs = self.api.fs
            fdata = fs.get_info(fid, True)
            fdata.path = fs.path_by_id(fid).path
            #fdata.content = fdata.obj.content
            content = fdata.obj.content
            del fdata.obj
            fdata.w23p_app = self.get('w23p_app')
            if cmd is 'write_file':
                frm_data = new FormData()
                for k in Object.keys(fdata):
                    frm_data.append(k, fdata[k])
                frm_data.append('content', new Blob([content], {type:'text/plain'}))
                post_data = frm_data
            elif cmd is 'del_file':
                post_data = {fdata: fdata}
            else:
                raise Error('unknown command: ' + cmd)

            self.api.server.post(cmd, post_data) \
              .then( def(resp):
                        print('server_resp: ', resp.data)
                        if cmd is 'write_file' and resp.data.md5_hash and not resp.data.error:
                            fs.files[fid].md5_hash = resp.data.md5_hash
                        if (e = resp.data.error):
                            self.flash('Server error: ' + e, 'error');
                    , def(e):
                        self.flash('Server error: ' + e.message, 'error');
              )

        self.api.fs.on('write_file', def(fid): process_file('write_file', fid);)
        self.api.fs.on('del_file', def(fid): process_file('del_file', fid);)


    def search(self, r):
        fs = self.api.fs
        ret= []
        for fid in fs.files:
            obj = fs.files[fid]
            if r.test(obj.content):
                 ret.push([fid, fs.path_by_id(fid)])
        return ret

    @vc.action
    @asyncer
    def try_connect(self):
        self.state_api.state.is_logged = (yield self.api.server.get('try_connect')) and True

    @vc.action
    @asyncer
    def login(self, data):
        pwd = data.get('password')
        self.state_api.state.is_logged = \
            (yield self.api.server.post('login', {password: pwd})).data.user

    @vc.action
    @asyncer
    def logout(self):
        self.commit('toggle_busy', True)
        yield self.api.server.post('logout')
        self.commit('toggle_busy', False)
        self.state_api.state.is_logged = False
        self.dispatch('start_modal', 'login')


    @vc.action
    @asyncer
    def w23p_app_list(self):
        self.state_api.state.w23p_app_list = (yield self.api.server.get('app_list')).data.app_list

    @vc.action
    def flash(self, *args):
        self.commit('flash', *args)
        self.$emit('flash', *args)

    @vc.action
    @asyncer
    def menu_click(self, it):
        is_cmd = /^#cmd:(.*)$/
        if not it.href or not (cmd = is_cmd.exec(it.href)):
            return
        cmd = cmd[1]
        adoc_num = self.get('/editor.active_doc_num')
        if cmd is 'toggle_explorer':
            self.commit('toggle_explorer')
        elif cmd is 'select_app':
            self.dispatch('select_app')
        elif cmd is 'compile':
            if adoc_num:
                self.dispatch('/editor.compile_active_doc')
        elif cmd is 'save':
            if adoc_num:
                self.dispatch('/editor.save', adoc_num)
                self.flash('Done!', 'ok')
        elif cmd is 'save_all_close':
            yield self.dispatch('/editor.save_all')
            yield self.dispatch('/editor.close_all')
        elif cmd is 'close_all':
            self.dispatch('/editor.close_all')
        elif cmd is 'logout':
            self.dispatch('logout')
        elif cmd is 'reload_apps':
            self.dispatch('reload_apps')

    @vc.action
    @asyncer
    def load_fs_from_srv(self, w23p_app):
        fs = self.api.fs
        self.commit('toggle_busy', True)
        try:
            ret = (yield self.api.server.get('get_fs', [w23p_app]))
        except as err:
            pass
        self.dispatch('load_fs', ret.data, w23p_app)
        self.commit('toggle_busy', False)
        return ret

    @vc.action
    def load_fs(self, data, w23p_app):
        self.api.fs.loads(data)
        self.commit('set_w23p_app', w23p_app)
        self.$emit('fs_restored', w23p_app)

    @vc.action
    def start_modal(self, inner, args):
        resolver = def(ok, err):
            self.commit('set_modal_promise_ok', ok)
        ret = Promise(resolver)
        self.commit('set_modal_inner', inner, args)
        self.commit('set_modal_promise', ret)
        self.commit('toggle_modal', True)
        return ret

    @vc.action
    def close_modal(self, *args):
        ok = self.get('modal_state').promise_ok
        self.commit('toggle_modal', False)
        self.commit('set_modal_inner', None, None)
        self.commit('set_modal_promise', None)
        self.commit('set_modal_promise_ok', None)
        ok.apply(None, args)

    @vc.action
    @asyncer
    def select_app(self):
        self.commit('toggle_busy', True)
        yield self.dispatch('w23p_app_list')
        self.commit('toggle_busy', False)
        app = yield self.dispatch('start_modal', 'app_selector', {app_list: self.get('w23p_app_list')} )
        if app is 'cancel':
            return

        if not (yield self.dispatch('/editor.close_all')):
            return

        self.commit('/explorer.set_dir', 0)
        return self.dispatch('load_fs_from_srv', app)

    @vc.action
    def reload_apps(self):
        self.api.server.get('reload')

    @vc.action
    def compile(self, compiler, s, fp, compile_only):
        c_map = {
            'vuepy':vuepy_compile,
            'rs':rs_compile,
            'rapydscript':rs_compile,
        }
        if not c_map[compiler]:
            self.flash('Can`t compile ' + fp, 'warn')
            return
        try:
            compiled = c_map[compiler](s, fp, self.api.fs)
        except as err:
            self.commit('compile_error', err)
            return {error:err}
        self.commit('compile_error', None)
        if not compile_only:
            fs = self.api.fs
            off = fs.on('write_file', def(fid): self.dispatch('/editor.reload', fid);)
            vuepy_output.output(compiled, self.api.fs, self.output_path_map)
            off()
            self.$emit('fs_changed')
        return compiled

if __name__ == '__main__':
    pass
