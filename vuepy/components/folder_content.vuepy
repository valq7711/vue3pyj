v-def templ_folder_content:
    div(class = 'panel'):
        div(class = 'panel-block'):
            nav(class="breadcrumb"):
                ul:
                    li(v-for = 'dir in path', @click.stop = 'change_dir(dir.id)'):
                        a(href = '#'):
                            span(class = 'tag is-medium'):'{{dir.name}}'
                    li:
                        a:
                            div(class = 'field is-grouped'):
                                div(class = 'field has-addons', style = 'margin-bottom:inherit;'):
                                    p(class = 'control'):
                                        input(ref = 'new', style = 'width:180px;', class = 'input',
                                              :value = 'save_as && save_as.name',
                                              placeholder = 'newfile.py'):
                                    p(class = 'control mr-2'):
                                        template(v-if = 'save_as'):
                                            button(
                                                class ='button is-info',
                                                @click.stop = "(action('save_as', {name: \$refs.new.value, content: save_as.content}))"
                                            ): 'Save'
                                        template(v-else):
                                            button(
                                                class ='button is-info',
                                                @click.stop = "(action('create', \$refs.new.value))"
                                            ): 'Create'
                                p(class = 'control'):
                                    button(
                                        class ='button is-primary',
                                        @click.stop = "action('upload')"
                                    ): 'Upload'

        div(class = 'panel-block'):
            div(class='buttons'):
                button(v-for = 'it in actions', @click.stop = 'it.disabled || action(it.name)',
                   :disabled = 'it.disabled',
                   class = 'button', :class = "'is-' + (it.status ? it.status: 'primary' )"
                ):
                    '{{it.label}}'
                    span(v-if = 'selected_cnt(it.name)>0', class = 'badge'
                    ): '{{selected_cnt(it.name)}}'
                button(v-if = "selected_cnt('paste')>0" , @click.stop = "action('clear_basket')",
                   class = 'button is-primary'
                ):
                    'Clear clipboard'

        div(class = 'panel-block is-block'):
            div:
                table(class= 'table is-narrow', style = 'width:100%;'):
                    thead:
                        tr(style = 'background-color:whitesmoke;'):
                            th(v-for = 'fld, idx in fields',
                               :colspan='idx == 0 ? 2 : 1',
                            ):
                                '{{fld.label}}'
                            th(v-if = 'row_actions'):
                                'actions'
                        tr(class = 'tr0'):
                            th(style = 'width:45px;'):
                            th(v-for = 'fld in fields', :style = "{width: (fld.width || 'initial')}"):
                            th(v-if = 'row_actions',  style = 'min-width:80px;'):
            div(class = 'block', style = 'max-height: 65vh; overflow:auto;'):
                table(class= 'table  is-narrow', style = 'width:100%;'):
                    thead:
                        tr(class = 'tr0'):
                            th(style = 'width:45px;'):
                            th(v-for = 'fld in fields', :style = "{width: (fld.width || 'initial')}"):
                            th(v-if = 'row_actions',  style = 'min-width:80px;'):
                    tbody:
                        tr(v-for = 'row in rows_c',
                           @click.stop = 'toggle_select(row.id)',
                           :key = 'row.id',
                           :class = '{"is-selected": selected[row.id]}'
                          ):
                            td:
                                i(class='clickable',  :class = 'row._icon_.class', :style='row._icon_.style', @click.stop = 'click(row.id)'):
                            td(v-for = 'fld, idx in fields'):
                                template(v-if = 'idx==0'):
                                    span(class='clickable', @click.stop = 'click(row.id)'):
                                        '{{row[fld.name]}}'
                                template(v-else):
                                    span:
                                        '{{row[fld.name]}}'
                            td(v-if = 'row_actions'):
                                span(v-for = 'ract in row_actions(row)', style='margin-right:3px;'):
                                    i(class='clickable',
                                          :class = 'ract.icon.class',
                                          :style='ract.icon.style',
                                          @click.stop = 'action(ract.name, row.id)'):


v-pyj:
+++
from asset.rs_vue import RS_vue, V_collector
from asset.common import blur_click_listener

def it_by_path(obj, path):
    if not isinstance(path, Array):
        path = path.split('.')
    cur = obj
    path.forEach(def(p):
        nonlocal cur
        cur = cur[p]
    )
    return cur


vc = V_collector()
class Folder_content(RS_vue):
    def __init__(self):
        super(vc)
        self.template = templ_folder_content
        self.map_store = {
            type_field: '/explorer.type_field',
            fields : '/explorer.fields',
            rows : '/explorer.list_dir',
            sort_by: '/explorer.sort_by',
            selected: '/explorer.selected',
            path: '/explorer.path_arr',
            save_as: '/explorer.save_as',
            row_actions: '/explorer.row_actions',
            toggle_select:'/explorer.toggle_select~',
            change_dir:'/explorer.set_dir~',
            click:'/explorer.click_item*',
            action:'/explorer.doit*',
            basket:'/explorer.basket',
            shown: 'show_explorer'
        }


    def _init_data(self):
        ret = {
            actions: [
                {name: 'copy', label: 'Copy'},
                {name: 'cut', label: 'Cut', disabled:True},
                {name: 'paste', label: 'Paste' },
                {name: 'del', label: 'Del',  status: 'danger'},
            ]
        }
        return ret

    @vc.meth
    def toggle_select(self, mut, rid):
        r = self.rows.find(def(it): return it.id is rid;)
        if r[self.type_field] is 'file':
            mut(rid)

    @vc.meth
    def selected_cnt(self, act):
        if act is 'del':
            return Object.keys(self.selected).length
        elif act is 'paste':
            return self.basket.length - 1

    #@vc.watch
    #def save_as(self,  n, o):
    #    self.$refs.new.value = n and n.name

    @vc.computed
    def rows_c(self):
        type_icon = {
            file: {class: 'far fa-file', style: 'color: gray' },
            dir: {class: 'fa fa-folder', style: 'color: gray' },
        }
        type_field = self.type_field or 'type'
        rows_sorted = self.rows[:]
        sort_by = self.sort_by or self.fields[0].name
        rows_sorted.sort(def(a,b):
            a_type = it_by_path(a, type_field)
            b_type = it_by_path(b, type_field)
            ret =  a_type > b_type ? 1 : (a_type < b_type ? -1 : 0)
            if not ret:
                a = a[sort_by]
                b = b[sort_by]
                ret = a > b ? 1 : (a < b ? -1 : 0)
            return ret
        )
        ret = []
        for row in rows_sorted:
            rec = {id: row.id}
            for fld in self.fields:
                rec[fld.name] = it_by_path(row, fld.name)
                if fld.formatter:
                    rec[fld.name] = fld.formatter(rec[fld.name], row)
            rec._icon_ = type_icon[row[type_field]]
            ret.push(rec)
        return ret

    @vc.watch
    def shown(self, n):
        if n:
            self.listener.start()
        else:
            self.listener.stop()

    def mounted(self):
        self.listener = blur_click_listener(self.$el, def(e): self.$emit('blur', e);)

    def beforeDestroy(self):
        self.listener.stop()


def make():
    return Folder_content()

if __name__=='__main__':
    main()
---